    
         //各種プロトタイプを設定
    String.prototype.trim = function(){
        if (this=="" ) return ""
        else return this.replace(/[\r\n]+$|^\s+|\s+$/g, "");
    }
    String.prototype.getParent = function(){
        var r=this;var i=this.lastIndexOf("/");if(i>=0) r=this.substring(0,i);
        return r;
    }
    //ファイル名のみ取り出す（拡張子付き）
    String.prototype.getName = function(){
        var r=this;var i=this.lastIndexOf("/");if(i>=0) r=this.substring(i+1);
        return r;
    }
    //拡張子のみを取り出す。
    String.prototype.getExt = function(){
        var r="";var i=this.lastIndexOf(".");if (i>=0) r=this.substring(i);
        return r;
    }
    //指定した書拡張子に変更（dotを必ず入れること）空文字を入れれば拡張子の消去。
    String.prototype.changeExt=function(s){
        var i=this.lastIndexOf(".");
        if(i>=0){return this.substring(0,i)+s;}else{return this; }
    }
    //文字の置換。（全ての一致した部分を置換）
    String.prototype.replaceAll=function(s,d){ return this.split(s).join(d);}

    FootageItem.prototype.nameTrue = function(){ var b=this.name;this.name=""; var ret=this.name;this.name=b;return ret;}

    String.prototype.replaceAll=function(s,d){ return this.split(s).join(d);}
	
    // ************************************************************************
    var addNull = function(cmp,name,nl)
    {
        var ret = null;
        ret = cmp.layers.addNull(cmp.duration);
        if(ret ==null) return ret;
        ret.name = name;
        ret.source.name = name;
        if(nl!=null) {
            var src = ret.source;
            ret.replaceSource(nl.source,false);
            src.remove();
        }
        return ret;
    }
    // ************************************************************************
	var getLayerAll = function()
	{
		var ret = [];
		var ac = app.project.activeItem;
		if ( (ac instanceof CompItem) === false) {
			alert("none acitived CompItem !");
			return ret;
		} 
		var sel = ac.selectedLayers;
		if ( sel.length <=0) {
			alert(" none seleced Layer!");
			return ret;
		}
		ret = sel;
		return ret;
	}
    //*************************
    var getComp = function()
    {
        var ret = null;
        var sel = app.project.selection;
        if (sel.length>0)
        {
            for ( var i=0; i<sel.length; i++)
            {
                if ( (sel[i] instanceof CompItem)===true)
                {
                    ret= sel[i];
                    break;
                }
            }
        }else{
            alert("コンポを1個選んでください");
        }
        if(ret == null){
            alert("コンポを選んでください");
        }
        
        return ret;
    }
    //*************************
    var get3DLayer = function()
    {
        var ret = null;
        var ac = app.project.activeItem;
        if ( (ac instanceof CompItem)===false) 
        {
            alert("コンポがアクティブになっていません");
            return ret;
        }
        var sel = ac.selectedLayers;
        if(sel.length>0)
        {
            for ( var i=0; i<sel.length; i++)
            if (sel[i].threeDLayer==true)
            {
                ret = sel[i];
                break;
            }
        }
        return ret;
    }
    //*************************
    var getCameraLayer = function()
    {
        var ret = null;
        var ac = app.project.activeItem;
        if ( (ac instanceof CompItem)===false) 
        {
            alert("コンポがアクティブになっていません");
            return ret;
        }
        var sel = ac.selectedLayers;
        if(sel.length>0)
        {
            for ( var i=0; i<sel.length; i++)
            if (sel[i] instanceof CameraLayer)
            {
                ret = sel[i];
                break;
            }
        }
        return ret;
    }
    var getLayer = function()
	{
		var ret = null;
		var ac = app.project.activeItem;
		if ( !(ac instanceof CompItem)) {
			alert("コンポをアクティブにしてください");
			return ret;
		}
		var sel = ac.selectedLayers;
		if (sel.length!=1) {
			alert("レイヤをひとつだけ選んでください");
			return ret;
		}
		return sel[0];
	}
    // ************************************************************************
	var getLayerAll = function()
	{
		var ret = [];
		var ac = app.project.activeItem;
		if ( (ac instanceof CompItem) === false) {
			alert("none acitived CompItem !");
			return ret;
		} 
		var sel = ac.selectedLayers;
		if ( sel.length <=0) {
			alert(" none seleced Layer!");
			return ret;
		}
		ret = sel;
		return ret;
	}
    // *****
    var getFootageComp = function()
    {
        var ret = null;
        var sel  = app.project.selection;
        if (sel.length>0){
            for ( var i=0; i<sel.length;i++)
            {
                if (sel[i] instanceof CompItem)
                {
                    ret = sel[i];
                    break;
                }
            }
        }
        return ret;
    }
    //*************************
    var combine = function(str,adds)
    {
        var ret = str;
        if (ret.length>0)
        {
            if (ret[ret.length-1] =="_"){
                ret = ret.substring(0,ret.length-1);
            }
        }
        if(adds.length>0)
        {
            if (adds[0] =="_"){
                adds = adds.substring(1);
            }
        }
        ret = ret +"_" + adds;
        return ret;
    }
     // ************************************************************************
     var newName = function(s)
        {
              function findName(nm)
            {
                var ret = false;
                if (app.project.numItems>0)
                {
                    var cnt = app.project.numItems;
                    if (cnt>500) cnt = 500;
                    for (var i=1; i<=cnt; i++)
                    {
                        if (app.project.items[i].name == nm)
                        {
                            ret = true;
                            break;
                        }
                    }
                }
                return ret;
            }
            var nm = s;
            var idx=0;
            do
            {
                nm = s + idx + "";
                idx++;
            }while(findName(nm)==true);
            return nm;
        }
    // ************************************************************************
	var addFx = function(lyr , fxname, caption)
	{
		var ret = null;
		if ((lyr instanceof AVLayer)==false) return ret;
		var eg = lyr.property("ADBE Effect Parade");
		if ( eg.canAddProperty(fxname) === true)
		{
			var f = eg.property(caption);
			if ( f != null) {
				if ( f.matchName == fxname) {
					ret = f;
					return ret;
				}
			}
			ret = eg.addProperty(fxname);
			if ( ret !==null){
				ret.name = caption;
			}
		}
		return ret;
	}
	
	// ************************************************************************
	var addPoint2D = function()
	{
		var sel = getLayerAll();
		if (sel.length<=0) return;
		
		for ( var i=0; i< sel.length; i++)
		{
			var ret = addFx(sel[i],"ADBE Point Control","Pos2D");
			if (ret != null) {
				ret.enabled = false;
				var  p = ret.property(1);
				if (p.canSetExpression == true) {
					p.expression = "toComp(thisLayer.anchorPoint)";
				}
			}
		}
	}
	// ************************************************************************
	var addPoint3D = function()
	{
		var sel = getLayerAll();
		if (sel.length<=0) return;
		
		for ( var i=0; i< sel.length; i++)
		{
			var ret = addFx(sel[i],"ADBE Point3D Control","Pos3D");
			if (ret != null) {
				ret.enabled = false;
				var  p = ret.property(1);
				if (p.canSetExpression == true) {
					p.expression = "toWorld(thisLayer.anchorPoint)";
				}
			}
		}
	}
    // *******************************************************************************
	var addCenterLayer = function()
	{
		var ac  = app.project.activeItem;
		if ( (ac instanceof CompItem) === false) {
			alert("none actived CompItem!");
			return;
		}
		var sel = ac.selectedLayers;
		if (sel.length <2 ) {
			alert("2 over selected!");
			return;
		}
		var targetLayers = [];
		var numKeys = [];
		for ( var i = 0; i < sel.length; i++)
		{
			if (sel[i].threeDLayer == true){
				targetLayers.push(sel[i]);
				numKeys.push(sel[i].property("ADBE Transform Group").property("ADBE Position").numKeys);
			}
		}
		if(targetLayers.length<2)
		{
			alert("2 over selected 3DLayers !");
			return;
		}
		
		for ( var i=0; i<sel.length; i++)
		{
			sel[i].selected = false;
		}
		
		var cmp = targetLayers[0].containingComp;
		var frameRate = cmp.frameRate;
		var duration = cmp.duration;
		var frameCount = Math.floor(duration * frameRate);
		var times = [];
		var values = [];
		for ( var i = 0; i < frameCount; i++)
		{
			var tm = i / frameRate;
			var v = [0,0,0];
			for ( var j=0; j<targetLayers.length; j++)
			{
				var p = targetLayers[j].property("ADBE Transform Group").property("ADBE Position");
				var v1 = p.valueAtTime(tm,false);
				v[0] += v1[0];
				v[1] += v1[1];
				v[2] += v1[2];
			}
			v[0] /= targetLayers.length;
			v[1] /= targetLayers.length;
			v[2] /= targetLayers.length;
			
			times.push(tm);
			values.push(v);
		}

		app.beginUndoGroup("CenterLayer");
		var addNullLayer = cmp.layers.addNull();
		addNullLayer.source.name = "centerPos";
		addNullLayer.name = "centerPos";
		
		addNullLayer.threeDLayer = true;
		var pp = addNullLayer.property("ADBE Transform Group").property("ADBE Position");
		pp.setValuesAtTimes(times,values);
		addNullLayer.selected = true;
		addNullLayer.moveAfter(targetLayers[0]);
		
		app.endUndoGroup();
		
	}