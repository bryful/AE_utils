<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="JSX" xml:space="preserve">
    <value>/*
	AE_Menuで書き出されるスクリプトメニューのひな型。

	以下の$で始まるタグが置換される。(下の例は全角二していますが実際は半角です)

	＄Title		メニューのタイトル名に置換される。

	＄BaseFolder	jsx/ffxが収納されているフォルダのパスに置換される。
				絶対パスの場合 "/c/Bin/Scripts"
				相対パスの場合 "./(foo)"
				になる

	＄Items		呼び出すjsx/ffxのファイル名を配列として置換
		"aaa.jsx",
		"bbb.jsz"
		"ccc.ffx"
		こんな感じな形式に置換

	＄IconWidth	ボタンの横幅ピクセル
	＄IconHeight	ボタンの縦幅ピクセル

*/
(function(me){
//----------------------------------
/*
//ライブラリの読み込み　必要に応じて
#includepath "./;./(lib)"
#include "prototypeArray.jsx"
#include "prototypeFile.jsx"
#include "prototypeItem.jsx"
#include "prototypeParse.jsx"
#include "prototypeProject.jsx"
#include "prototypeProperty.jsx"
#include "prototypeString.jsx"
*/
	// バージョン識別
	var AEVersion = "";
	var chkVersion = function()
	{
		AEVersion = "";
		try{
			var vn = app.version.substring(0,4)*1;
			if(vn&lt;=11){
				AEVersion = "CS6";
			}else if (vn&lt;=12.2){
				AEVersion = "CC";
			}else if (vn&lt;=13.2){
				AEVersion = "CC2014";
			}else if (vn&lt;=13.8){
				AEVersion = "CC2015";
			}else if (vn&lt;=14.2){
				AEVersion = "CC2017";
			}else if (vn&lt;=15.1){
				AEVersion = "CC2018";
			}else if (vn&lt;=16.2){
				AEVersion = "CC2019";
			}else if (vn&lt;=17.2){
				AEVersion = "CC2020";
			}else if (vn&lt;=18.2){
				AEVersion = "CC2021";
			}
		}catch(e){
		}
		if (AEVersion=="") {
			var yr = (new Date()).getYear()+1900;
			AEVersion = "CC" + yr;
		}
	}
	chkVersion();	
	//----------------------------------
	// メニューに表示されるタイトル
	var scriptName = "$Title";
	//----------------------------------
	//読み込むフォルダ
	var cmdItemsPathBase = "$BaseFolder";
	//読み込むスクリプト等
	var cmdItemsPath =[
$Items
	];
	// アイコンサイズ
	var iconWidth = $IconWidth; 
	var iconHeight = $IconHeight; 

	var scrolBarWidth = 30;
	//----------------------------------
	//prototype登録
	//文字列の前後の空白を削除
	String.prototype.trim = function(){
		if (this=="" ) return ""
		else return this.replace(/[\r\n]+$|^\s+|\s+$/g, "");
	}
	String.prototype.getParent = function(){
		var r=this;var i=this.lastIndexOf("/");if(i&gt;=0) r=this.substring(0,i);
		return r;
	}
	//ファイル名のみ取り出す（拡張子付き）
	String.prototype.getName = function(){
		var r=this;var i=this.lastIndexOf("/");if(i&gt;=0) r=this.substring(i+1);
		return r;
	}
	//拡張子のみを取り出す。
	String.prototype.getExt = function(){
		var r="";var i=this.lastIndexOf(".");if (i&gt;=0) r=this.substring(i);
		return r;
	}
	//指定した書拡張子に変更（dotを必ず入れること）空文字を入れれば拡張子の消去。
	String.prototype.changeExt=function(s){
		var i=this.lastIndexOf(".");
		if(i&gt;=0){return this.substring(0,i)+s;}else{return this; }
	}
	//文字の置換。（全ての一致した部分を置換）
	String.prototype.replaceAll=function(s,d){ return this.split(s).join(d);}

	
	var cmdItems = [];
	//-------------------------------------------------------------------------
	//cmdItems配列に読み込むjsx/ffxの情報を構築する
	var setupItems = function()
	{
		var cnt = cmdItemsPath.length;
		if(cnt&lt;=0) return;
		for (var i=0; i&lt;cnt; i++)
		{
			var obj = {};
			obj.script = null;　//jsx/ffxのFile
			obj.icon = null;	//iconbutton用の画像File
			obj.isFX = false;	// ffxならtrue
			obj.work = null;	//スクリプトのあるフォルダ

			obj.script  = new File(cmdItemsPathBase + "/" + cmdItemsPath[i]);
			obj.icon  = new File(cmdItemsPathBase + "/" + cmdItemsPath[i].changeExt(".png"));
			obj.work = new Folder(cmdItemsPathBase);

			if((obj.script.exists==true)&amp;&amp;(obj.icon.exists==true))
			{
				var e = cmdItemsPath[i].getExt().toLowerCase();
				var flg = true;
				if ((e==".jsx")||(e==".jsxbin")) {
					obj.isFX = false;
					flg = true;
				}else{
					if (File.decode(obj.script.name).indexOf(AEVersion)&gt;=0){
						obj.isFX = true;
						flg = true;
					}else{
						flg = false;
					}
				}
				if (flg ==true) {cmdItems.push(obj);}
			}
		}
	}
	setupItems();
	//-------------------------------------------------------------------------
	//Windowの作成
	var winObj = ( me instanceof Panel) ? me : new Window("palette", scriptName, [ 0,  0, iconWidth+scrolBarWidth, iconHeight *  cmdItems.length]  ,{resizeable:true});
	//-------------------------------------------------------------------------
	//iconButtonが押された時の処理
	var exec = function()
	{
		// jsx.ffxのファイルがなければエラー
		if(this.script==null){
			alert("error");
			return;
		}
		// カレントをスクリプトのある場所へ移動
		var bak = Folder.current;
		Folder.current = this.work;

		// jsxとffxで処理を変える
		if(this.isFX==true)
		{
			var sl = [];
			var ac = app.project.activeItem;
			if ( ac instanceof CompItem){
				if (ac.selectedLayers.length&gt;0){
					sl = ac.selectedLayers;
				}
			}
			if ( sl.length&gt;0){
				app.beginUndoGroup(File.decode(this.script.name));
				for ( var i=0; i&lt;ac.selectedLayers.length; i++)
				{
					ac.selectedLayers[i].applyPreset(this.script);
				}
				app.endUndoGroup();
			}else{
				alert("レイヤを選択して下さい。");
			}
		}else{
			if (this.script.open("r")){
				try{
					var s = this.script.read();
					eval(s);
				}catch(e){
					alert("なんかスクリプト実行でエラー！\n\n"+e.toString());
				}finally{
					this.script.close();
				}
			}
		}
		//カレントを元に戻す
		Folder.current = bak;

	}	
	//-------------------------------------------------------------------------
	//ボタンの配列
	var ctrlTbl = [];
	//スクロールバー
	var scrolB = null;
	//ボタンを配置
	var setupButtons = function()
	{
		if (cmdItems.length&lt;=0) return;
		var x = 0;
		var y = 0;
		for (var i=0; i&lt;cmdItems.length; i++)
		{
			var btn = winObj.add("iconbutton", [x,y,x+iconWidth,y+ iconHeight],cmdItems[i].icon);
			btn.script = cmdItems[i].script;
			btn.isFX = cmdItems[i].isFX;
			btn.work = cmdItems[i].script.parent;
			btn.onClick = exec;

			ctrlTbl.push(btn);
			y += iconHeight;
		}

		scrolB = winObj.add("scrollbar", [iconWidth,0,iconWidth+scrolBarWidth,iconHeight*ctrlTbl.length], 0, 0, 100,);
	}
	setupButtons();
	//-------------------------------------------------------------------------
	//resize時の処理
	var  resize= function()
	{
		var scrV = scrolB.value;
		var b = winObj.bounds;
		var w = b[2] - b[0];
		var h = b[3] - b[1];
		
		var scrolB_b =  scrolB.bounds;
		scrolB_b[0] = w-scrolBarWidth;
		scrolB_b[2] = scrolB_b[0] + scrolBarWidth;
		scrolB_b[3] = scrolB_b[1] + h;
		scrolB.bounds = scrolB_b;

		var scv = iconHeight * ctrlTbl.length - h;
		if(scv&gt;0)
		{
			if(scrolB.value&gt;scv){
				scrolB.value = scv;
			}
			scrolB.maxvalue = scv;
		}else{
			scrolB.value = 0;
			scrolB.maxvalue = 0;

		}
		if(scrolB.value != scrV)
		{
			var v = scrolB.value;
			for (var i=0; i&lt;ctrlTbl.length;i++)
			{
				var b = ctrlTbl[i].bounds;
				b[1] = -v +iconHeight*i;
				b[3] = b[1] + iconHeight;
				ctrlTbl[i].bounds = b;
			}
		}

	}
	resize();
	winObj.addEventListener("resize",resize);
	winObj.onResize = resize;
	
	//スクロールバーの処理
	var changeHeight=function()
	{
		var v = scrolB.value;
		for (var i=0; i&lt;ctrlTbl.length;i++)
		{
			var b = ctrlTbl[i].bounds;
			b[1] = -v +iconHeight*i;
			b[3] = b[1] + iconHeight;
			ctrlTbl[i].bounds = b;
		}
	}
	scrolB.onChange = changeHeight;
	scrolB.onChanging = changeHeight;
	
	//-------------------------------------------------------------------------
	if ( ( me instanceof Panel) == false){
		winObj.center(); 
		winObj.show();
	}
	//-------------------------------------------------------------------------
})(this);</value>
  </data>
</root>